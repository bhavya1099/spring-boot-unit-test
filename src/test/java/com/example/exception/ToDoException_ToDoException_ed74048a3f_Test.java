/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Null Error Message
- Purpose: To check how the function handles a null error message.
- Steps: Pass a null value to the function.
- Expected Result: The function should throw an NullPointerException.

Test Scenario 2: Empty Error Message
- Purpose: To check how the function handles an empty string as an error message.
- Steps: Pass an empty string to the function.
- Expected Result: The function should successfully create an exception with an empty error message.

Test Scenario 3: Valid Error Message
- Purpose: To check how the function handles a valid error message.
- Steps: Pass a valid string as an error message to the function.
- Expected Result: The function should successfully create an exception with the provided error message.

Test Scenario 4: Long Error Message
- Purpose: To check how the function handles a very long error message.
- Steps: Pass a very long string (beyond the typical length of an error message) to the function.
- Expected Result: The function should successfully create an exception with the provided long error message.

Test Scenario 5: Special Characters in Error Message
- Purpose: To check how the function handles an error message containing special characters.
- Steps: Pass a string containing special characters to the function.
- Expected Result: The function should successfully create an exception with the provided error message containing special characters. 

Test Scenario 6: Numeric Error Message
- Purpose: To check how the function handles an error message containing numbers.
- Steps: Pass a string containing numbers to the function.
- Expected Result: The function should successfully create an exception with the provided numeric error message.
*/
package com.example.exception;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class ToDoException_ToDoException_ed74048a3f_Test {

    private ToDoException toDoException;

    @BeforeEach
    public void setUp() {
        toDoException = new ToDoException();
    }

    @Test
    public void testConstructor_NullErrorMessage() {
        assertThrows(NullPointerException.class, () -> new ToDoException(null));
    }

    @Test
    public void testConstructor_EmptyErrorMessage() {
        ToDoException exception = new ToDoException("");
        assertEquals("", exception.getErrorMessage());
    }

    @Test
    public void testConstructor_ValidErrorMessage() {
        String validErrorMessage = "This is a valid error message.";
        ToDoException exception = new ToDoException(validErrorMessage);
        assertEquals(validErrorMessage, exception.getErrorMessage());
    }

    @Test
    public void testConstructor_LongErrorMessage() {
        String longErrorMessage = "This is a very long error message. This is a very long error message. This is a very long error message. This is a very long error message. This is a very long error message.";
        ToDoException exception = new ToDoException(longErrorMessage);
        assertEquals(longErrorMessage, exception.getErrorMessage());
    }

    @Test
    public void testConstructor_SpecialCharactersInErrorMessage() {
        String specialCharactersErrorMessage = "Error message with special characters: !@#$%^&*()";
        ToDoException exception = new ToDoException(specialCharactersErrorMessage);
        assertEquals(specialCharactersErrorMessage, exception.getErrorMessage());
    }

    @Test
    public void testConstructor_NumericErrorMessage() {
        String numericErrorMessage = "Error message with numbers: 1234567890";
        ToDoException exception = new ToDoException(numericErrorMessage);
        assertEquals(numericErrorMessage, exception.getErrorMessage());
    }
}
