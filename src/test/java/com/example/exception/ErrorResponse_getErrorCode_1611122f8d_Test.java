/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Default Value
- Verify that the getErrorCode() function is returning the default value of errorCode when no changes have been made to it.

Test Scenario 2: Changed Value
- Verify that the getErrorCode() function is returning the correct value after the errorCode has been changed.

Test Scenario 3: Negative Value
- Verify that the getErrorCode() function is returning the correct negative value if the errorCode has been set to a negative number.

Test Scenario 4: Maximum Integer Value
- Verify that the getErrorCode() function is returning the correct value when the errorCode has been set to the maximum integer value.

Test Scenario 5: Minimum Integer Value
- Verify that the getErrorCode() function is returning the correct value when the errorCode has been set to the minimum integer value.

Test Scenario 6: Thread Safety
- Verify that the getErrorCode() function is thread-safe and always returns the correct value even when accessed by multiple threads simultaneously.

Test Scenario 7: Concurrent Access
- Verify that the getErrorCode() function is returning the correct value when accessed concurrently by multiple threads.

Test Scenario 8: Null Value
- Verify that the getErrorCode() function is handling null value correctly if the errorCode is not initialized.

Test Scenario 9: Zero Value
- Verify that the getErrorCode() function is returning the correct value when the errorCode has been set to zero.

Test Scenario 10: Large Value
- Verify that the getErrorCode() function is returning the correct value when the errorCode has been set to a large number.
*/
package com.example.exception;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class ErrorResponse_getErrorCode_1611122f8d_Test {

    @Test
    public void testGetErrorCode_DefaultValue() {
        ErrorResponse errorResponse = new ErrorResponse();
        assertEquals(0, errorResponse.getErrorCode());
    }

    @Test
    public void testGetErrorCode_ChangedValue() {
        ErrorResponse errorResponse = new ErrorResponse();
        errorResponse.setErrorCode(123);
        assertEquals(123, errorResponse.getErrorCode());
    }

    @Test
    public void testGetErrorCode_NegativeValue() {
        ErrorResponse errorResponse = new ErrorResponse();
        errorResponse.setErrorCode(-123);
        assertEquals(-123, errorResponse.getErrorCode());
    }

    @Test
    public void testGetErrorCode_MaximumIntegerValue() {
        ErrorResponse errorResponse = new ErrorResponse();
        errorResponse.setErrorCode(Integer.MAX_VALUE);
        assertEquals(Integer.MAX_VALUE, errorResponse.getErrorCode());
    }

    @Test
    public void testGetErrorCode_MinimumIntegerValue() {
        ErrorResponse errorResponse = new ErrorResponse();
        errorResponse.setErrorCode(Integer.MIN_VALUE);
        assertEquals(Integer.MIN_VALUE, errorResponse.getErrorCode());
    }

    @Test
    public void testGetErrorCode_ZeroValue() {
        ErrorResponse errorResponse = new ErrorResponse();
        errorResponse.setErrorCode(0);
        assertEquals(0, errorResponse.getErrorCode());
    }

    @Test
    public void testGetErrorCode_LargeValue() {
        ErrorResponse errorResponse = new ErrorResponse();
        errorResponse.setErrorCode(1000000);
        assertEquals(1000000, errorResponse.getErrorCode());
    }
}
